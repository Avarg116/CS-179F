diff --git a/Makefile b/Makefile
index a074a80..32d7260 100644
--- a/Makefile
+++ b/Makefile
@@ -143,6 +143,7 @@ UPROGS=\
 	$U/_bcachetest\
 	$U/_alloctest\
 	$U/_bigfile\
+	$U/_mmaptest\
 
 fs.img: mkfs/mkfs README user/xargstest.sh $(UPROGS)
 	mkfs/mkfs fs.img README user/xargstest.sh $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index 8a2171a..2d71134 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -146,6 +146,8 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             map_vma(pagetable_t, uint64);
+
 
 // uart.c
 void            uartinit(void);
diff --git a/kernel/fcntl.h b/kernel/fcntl.h
index d565483..2d5af9f 100644
--- a/kernel/fcntl.h
+++ b/kernel/fcntl.h
@@ -2,3 +2,8 @@
 #define O_WRONLY  0x001
 #define O_RDWR    0x002
 #define O_CREATE  0x200
+
+#define PROT_READ 0x001
+#define PROT_WRITE 0x002
+#define MAP_PRIVATE 0x001
+#define MAP_SHARED 0x002
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index c678813..2c0c4f8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -8,6 +8,7 @@
 #include "file.h"
 #include "proc.h"
 #include "defs.h"
+#include "fcntl.h"
 
 struct cpu cpus[NCPU];
 
@@ -272,9 +273,20 @@ fork(void)
   np->tf->a0 = 0;
 
   // increment reference counts on open file descriptors.
-  for(i = 0; i < NOFILE; i++)
+  for(i = 0; i < NOFILE; i++) {
     if(p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
+  }
+  for(int i = 0; i < 16; i++) { //fork modification
+    if(p->vma_table[i].valid_vma == 1) {
+      np->vma_table[i] = p->vma_table[i]; //child has same mapped regions as parent
+      if(np->vma_table[i].file != 0) {
+        filedup(np->vma_table[i].file); //ref to same file struct
+      }
+    }
+  }
+  
+  //
   np->cwd = idup(p->cwd);
 
   safestrcpy(np->name, p->name, sizeof(p->name));
@@ -334,6 +346,19 @@ exit(int status)
     }
   }
 
+  //exit similar to munmap
+  for(int i= 0; i < 16; i++) {
+    if(p->vma_table[i].valid_vma == 1) {
+      uint64 start= p->vma_table[i].addr;
+      uint64 length= p->vma_table[i].end - start; //specified region
+      uvmunmap(p->pagetable, start, length, 0); //unmap (deallocate) process's mapped regions
+      if(p->vma_table[i].file != 0) {
+        filedup(p->vma_table[i].file);
+      }
+    }
+  }
+  //
+
   begin_op(ROOTDEV);
   iput(p->cwd);
   end_op(ROOTDEV);
@@ -690,3 +715,45 @@ procdump(void)
     printf("\n");
   }
 }
+
+int map_vma(pagetable_t pagetable, uint64 va)
+{
+    struct proc *p = myproc();
+    struct vma_struct *vm = 0;
+    for(int i= 0; i < 16; i++) { //find vma
+      if(p->vma_table[i].valid_vma == 1 && va >= p->vma_table[i].addr && va < p->vma_table[i].end) {
+        vm = &p->vma_table[i];
+        break;
+      }
+    }
+    if(!vm) { //no valid vma
+      p->killed = 1;
+      return -1;
+    }
+
+    char *mem= (char *)kalloc(); //allocate physical page
+    memset(mem, 0, PGSIZE);
+    begin_op(ROOTDEV);
+    ilock(vm->file->ip);
+    if(readi(vm->file->ip, 0, (uint64)mem, va - vm->addr, PGSIZE) < 0) { //transfer data from file to physical page
+        iunlock(vm->file->ip);
+        end_op(ROOTDEV);
+        kfree(mem);
+        p->killed = 1;
+        return -1;
+    }
+    iunlock(vm->file->ip);
+    end_op(ROOTDEV);
+
+    uint64 flags= PTE_U; //set permissions
+    if(vm->prot & PROT_READ)
+        flags |= PTE_R;
+    if(vm->prot & PROT_WRITE)
+        flags |= PTE_W;
+    if(mappages(pagetable, va, PGSIZE, (uint64)mem, flags) != 0) { //map physical map to user's virtual memory
+        kfree(mem);
+        p->killed = 1;
+        return -1;
+    }
+    return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 812c769..2acab43 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -82,6 +82,16 @@ struct trapframe {
 
 enum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+struct vma_struct{
+  uint64 addr; //start
+  uint64 end;
+  int prot; //permissons (read or write)
+  int flags; //behaviors
+  struct file *file; //file object
+  int offset; //always 0
+  int valid_vma; //check vma used
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -103,4 +113,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  
+  struct vma_struct vma_table[16]; //vma regions
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ec78f3d..91eb152 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -105,6 +105,8 @@ extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
 extern uint64 sys_ntas(void);
+extern uint64 sys_mmap(void);
+extern uint64 sys_munmap(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -129,6 +131,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_ntas]    sys_ntas,
+[SYS_mmap]    sys_mmap, 
+[SYS_munmap]  sys_munmap,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index d329a6c..3383cd6 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,6 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mmap   23
+#define SYS_munmap 24 
 
 // System calls for labs
 #define SYS_ntas   22
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 032a164..28c15fd 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -483,3 +483,71 @@ sys_pipe(void)
   return 0;
 }
 
+uint64 sys_mmap() {
+  struct proc *p= myproc();
+  struct file *file;
+  int length, prot, flags, fd, offset, pos;
+
+  //check permissions, flags.
+  if(argint(1, &length) < 0 || argint(2, &prot) < 0 || argint(3, &flags) < 0 || 
+    argfd(4, &fd, &file) < 0 || argint(5, &offset) < 0)
+    return -1;
+  if((prot & PROT_WRITE) && (!file->writable) && (flags == MAP_SHARED))
+    return -1;
+
+  pos= 0;
+  while(pos < 16 && p->vma_table[pos].valid_vma != 0)
+      pos++;
+
+  if(pos != 16) { //allocate new vma at unused region
+    int start = p->sz;
+    p->sz = start + length;
+    //update vma
+    p->vma_table[pos].addr = start;
+    p->vma_table[pos].end = start + length;
+    p->vma_table[pos].prot = prot;
+    p->vma_table[pos].flags = flags;
+    p->vma_table[pos].file = file;
+    p->vma_table[pos].offset = 0;
+    p->vma_table[pos].valid_vma = 1;
+    filedup(file); //incr ref count
+    return start; //pointer to mapped area
+  } else {
+    return -1;
+  }
+}
+
+uint64 sys_munmap() {
+  struct proc *p = myproc();
+  uint64 start;
+  int length, pos;
+
+  if(argaddr(0, &start) < 0 || argint(1, &length) < 0)
+    return -1;
+
+  for(pos= 0; pos < 16; pos++) { //if VMA is used and in region
+    struct vma_struct *vma = &p->vma_table[pos];
+    if(vma->valid_vma == 1 && vma->addr <= start && start <= vma->end) {
+      if(vma->flags == MAP_SHARED) { //write back the modifications
+        begin_op(ROOTDEV);
+        ilock(vma->file->ip);
+        writei(vma->file->ip, 1, start, 0, length); //write data to inode (memory address)
+        iunlock(vma->file->ip);
+        end_op(ROOTDEV);
+      }
+
+      uvmunmap(p->pagetable, start, length, 0); //unmap specified pages
+      if(vma->addr == start && vma->end == start + length) { //unmap whole region, start, or end.
+        vma->valid_vma = 0;
+        filedup(vma->file);
+        fileclose(vma->file);
+      } else if(vma->addr == start) {
+        vma->addr = start + length;
+      } else if(start + length == vma->end) {
+        vma->end = start;
+      }
+      return 0;
+    }
+  }
+  return -1;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index ca07db5..ae8f4a7 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -68,9 +68,16 @@ usertrap(void)
     intr_on();
 
     syscall();
+
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+
+  //
+  } else if (r_scause() == 13 || r_scause() == 15) {
+    map_vma(p->pagetable, r_stval());
+
+ //
+ } else {
     printf("usertrap(): unexpected scause %p (%s) pid=%d\n", r_scause(), scause_desc(r_scause()), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
diff --git a/kernel/vm.c b/kernel/vm.c
index dd65184..0e2c360 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -190,8 +190,11 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 size, int do_free)
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
     if((*pte & PTE_V) == 0){
-      printf("va=%p pte=%p\n", a, *pte);
-      panic("uvmunmap: not mapped");
+      if(a == last) { //remap panic
+        break;
+      }
+      a += PGSIZE;
+      continue;
     }
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
@@ -326,9 +329,11 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
+      //panic("uvmcopy: pte should exist");
+      continue;
     if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+      //panic("uvmcopy: page not present");
+      continue;
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
diff --git a/user/user.h b/user/user.h
index 9fa1921..5027e26 100644
--- a/user/user.h
+++ b/user/user.h
@@ -27,6 +27,8 @@ int ntas();
 int crash(const char*, int);
 int mount(char*, char *);
 int umount(char*);
+void* mmap(void*, unsigned int, int, int, int, unsigned int);
+int munmap(void*, unsigned int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 1645c2b..9beb620 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -37,3 +37,5 @@ entry("sbrk");
 entry("sleep");
 entry("uptime");
 entry("ntas");
+entry("mmap");
+entry("munmap");
